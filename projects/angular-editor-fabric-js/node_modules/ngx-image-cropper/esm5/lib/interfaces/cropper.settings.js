/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/cropper.settings.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CropperSettings = /** @class */ (function () {
    function CropperSettings() {
        // From options
        this.format = 'png';
        this.maintainAspectRatio = true;
        this.transform = {};
        this.aspectRatio = 1;
        this.resizeToWidth = 0;
        this.resizeToHeight = 0;
        this.cropperMinWidth = 0;
        this.cropperMinHeight = 0;
        this.cropperMaxHeight = 0;
        this.cropperMaxWidth = 0;
        this.cropperStaticWidth = 0;
        this.cropperStaticHeight = 0;
        this.canvasRotation = 0;
        this.initialStepSize = 3;
        this.roundCropper = false;
        this.onlyScaleDown = false;
        this.imageQuality = 92;
        this.autoCrop = true;
        this.containWithinAspectRatio = false;
        this.hideResizeSquares = false;
        this.alignImage = 'center';
        // Internal
        this.cropperScaledMinWidth = 20;
        this.cropperScaledMinHeight = 20;
        this.cropperScaledMaxWidth = 20;
        this.cropperScaledMaxHeight = 20;
        this.stepSize = this.initialStepSize;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    CropperSettings.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        Object.keys(options).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return _this[k] = options[k]; }));
    };
    return CropperSettings;
}());
export { CropperSettings };
if (false) {
    /** @type {?} */
    CropperSettings.prototype.format;
    /** @type {?} */
    CropperSettings.prototype.maintainAspectRatio;
    /** @type {?} */
    CropperSettings.prototype.transform;
    /** @type {?} */
    CropperSettings.prototype.aspectRatio;
    /** @type {?} */
    CropperSettings.prototype.resizeToWidth;
    /** @type {?} */
    CropperSettings.prototype.resizeToHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperMinWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperMinHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperMaxHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperMaxWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperStaticWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperStaticHeight;
    /** @type {?} */
    CropperSettings.prototype.canvasRotation;
    /** @type {?} */
    CropperSettings.prototype.initialStepSize;
    /** @type {?} */
    CropperSettings.prototype.roundCropper;
    /** @type {?} */
    CropperSettings.prototype.onlyScaleDown;
    /** @type {?} */
    CropperSettings.prototype.imageQuality;
    /** @type {?} */
    CropperSettings.prototype.autoCrop;
    /** @type {?} */
    CropperSettings.prototype.backgroundColor;
    /** @type {?} */
    CropperSettings.prototype.containWithinAspectRatio;
    /** @type {?} */
    CropperSettings.prototype.hideResizeSquares;
    /** @type {?} */
    CropperSettings.prototype.alignImage;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMinWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMinHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMaxWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMaxHeight;
    /** @type {?} */
    CropperSettings.prototype.stepSize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JvcHBlci5zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbWFnZS1jcm9wcGVyLyIsInNvdXJjZXMiOlsibGliL2ludGVyZmFjZXMvY3JvcHBlci5zZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBO0lBQUE7O1FBR0UsV0FBTSxHQUFpQixLQUFLLENBQUM7UUFDN0Isd0JBQW1CLEdBQUcsSUFBSSxDQUFDO1FBQzNCLGNBQVMsR0FBbUIsRUFBRSxDQUFDO1FBQy9CLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLG1CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNyQixxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFDcEIsdUJBQWtCLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLHdCQUFtQixHQUFHLENBQUMsQ0FBQztRQUN4QixtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUNuQixvQkFBZSxHQUFHLENBQUMsQ0FBQztRQUNwQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0QixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRWhCLDZCQUF3QixHQUFHLEtBQUssQ0FBQztRQUNqQyxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDMUIsZUFBVSxHQUFzQixRQUFRLENBQUM7O1FBR3hDLDBCQUFxQixHQUFHLEVBQUUsQ0FBQztRQUMzQiwyQkFBc0IsR0FBRyxFQUFFLENBQUM7UUFDNUIsMEJBQXFCLEdBQUcsRUFBRSxDQUFDO1FBQzNCLDJCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUM1QixhQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUtuQyxDQUFDOzs7OztJQUhDLG9DQUFVOzs7O0lBQVYsVUFBVyxPQUFnQztRQUEzQyxpQkFFQztRQURDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsRUFBQyxDQUFDO0lBQzVELENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFwQ0QsSUFvQ0M7Ozs7SUFqQ0MsaUNBQTZCOztJQUM3Qiw4Q0FBMkI7O0lBQzNCLG9DQUErQjs7SUFDL0Isc0NBQWdCOztJQUNoQix3Q0FBa0I7O0lBQ2xCLHlDQUFtQjs7SUFDbkIsMENBQW9COztJQUNwQiwyQ0FBcUI7O0lBQ3JCLDJDQUFxQjs7SUFDckIsMENBQW9COztJQUNwQiw2Q0FBdUI7O0lBQ3ZCLDhDQUF3Qjs7SUFDeEIseUNBQW1COztJQUNuQiwwQ0FBb0I7O0lBQ3BCLHVDQUFxQjs7SUFDckIsd0NBQXNCOztJQUN0Qix1Q0FBa0I7O0lBQ2xCLG1DQUFnQjs7SUFDaEIsMENBQXdCOztJQUN4QixtREFBaUM7O0lBQ2pDLDRDQUEwQjs7SUFDMUIscUNBQXlDOztJQUd4QyxnREFBMkI7O0lBQzNCLGlEQUE0Qjs7SUFDNUIsZ0RBQTJCOztJQUMzQixpREFBNEI7O0lBQzVCLG1DQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyb3BwZXJPcHRpb25zLCBPdXRwdXRGb3JtYXQgfSBmcm9tICcuL2Nyb3BwZXItb3B0aW9ucy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSW1hZ2VUcmFuc2Zvcm0gfSBmcm9tICcuL2ltYWdlLXRyYW5zZm9ybS5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgQ3JvcHBlclNldHRpbmdzIHtcblxuICAvLyBGcm9tIG9wdGlvbnNcbiAgZm9ybWF0OiBPdXRwdXRGb3JtYXQgPSAncG5nJztcbiAgbWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gIHRyYW5zZm9ybTogSW1hZ2VUcmFuc2Zvcm0gPSB7fTtcbiAgYXNwZWN0UmF0aW8gPSAxO1xuICByZXNpemVUb1dpZHRoID0gMDtcbiAgcmVzaXplVG9IZWlnaHQgPSAwO1xuICBjcm9wcGVyTWluV2lkdGggPSAwO1xuICBjcm9wcGVyTWluSGVpZ2h0ID0gMDtcbiAgY3JvcHBlck1heEhlaWdodCA9IDA7XG4gIGNyb3BwZXJNYXhXaWR0aCA9IDA7XG4gIGNyb3BwZXJTdGF0aWNXaWR0aCA9IDA7XG4gIGNyb3BwZXJTdGF0aWNIZWlnaHQgPSAwO1xuICBjYW52YXNSb3RhdGlvbiA9IDA7XG4gIGluaXRpYWxTdGVwU2l6ZSA9IDM7XG4gIHJvdW5kQ3JvcHBlciA9IGZhbHNlO1xuICBvbmx5U2NhbGVEb3duID0gZmFsc2U7XG4gIGltYWdlUXVhbGl0eSA9IDkyO1xuICBhdXRvQ3JvcCA9IHRydWU7XG4gIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICBjb250YWluV2l0aGluQXNwZWN0UmF0aW8gPSBmYWxzZTtcbiAgaGlkZVJlc2l6ZVNxdWFyZXMgPSBmYWxzZTtcbiAgYWxpZ25JbWFnZTogJ2xlZnQnIHwgJ2NlbnRlcicgPSAnY2VudGVyJztcblxuICAvLyBJbnRlcm5hbFxuICAgY3JvcHBlclNjYWxlZE1pbldpZHRoID0gMjA7XG4gICBjcm9wcGVyU2NhbGVkTWluSGVpZ2h0ID0gMjA7XG4gICBjcm9wcGVyU2NhbGVkTWF4V2lkdGggPSAyMDtcbiAgIGNyb3BwZXJTY2FsZWRNYXhIZWlnaHQgPSAyMDtcbiAgIHN0ZXBTaXplID0gdGhpcy5pbml0aWFsU3RlcFNpemU7XG5cbiAgc2V0T3B0aW9ucyhvcHRpb25zOiBQYXJ0aWFsPENyb3BwZXJPcHRpb25zPik6IHZvaWQge1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goKGspID0+IHRoaXNba10gPSBvcHRpb25zW2tdKTtcbiAgfVxufVxuIl19